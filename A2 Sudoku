from tkinter import *

# set the sudoku grid
sudoku_grid = [                         
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

# correct answer
key = [
    [5, 3, 4, 6, 7, 8, 9, 1, 2],
    [6, 7, 2, 1, 9, 5, 3, 4, 8],
    [1, 9, 8, 3, 4, 2, 5, 6, 7],
    [8, 5, 9, 7, 6, 1, 4, 2, 3],
    [4, 2, 6, 8, 5, 3, 7, 9, 1],
    [7, 1, 3, 9, 2, 4, 8, 5, 6],
    [9, 6, 1, 5, 3, 7, 2, 8, 4],
    [2, 8, 7, 4, 1, 9, 6, 3, 5],
    [3, 4, 5, 2, 8, 6, 1, 7, 9]
]

entry_gird = []     # create a array to record what the user input

def create_grid():
    for i in range(len(sudoku_grid)):
        row = []                                    # set the row inside i loop(row loop) to reset it when enter a new row of sudoku_grid
        for j in range(len(sudoku_grid[i])):        # for each column in each row of sudoku_grid
            if sudoku_grid[i][j] == 0:              # if the number set as 0 will create an entry.
                entry = Entry(window, width=3, font=('Courier', 24), justify='center', fg='#000000', borderwidth=2)
                entry.grid(row=i, column=j, padx=5, pady=5)
                row.append(entry)                   # add the entry into the row
            else:                                   # if the number is not 0 will create a label displaying a given number
                label = Label(window, text=str(sudoku_grid[i][j]), width=3, font=('Courier', 24), justify='center', fg='#000000',
                              borderwidth=2)
                label.grid(row=i, column=j, padx=5, pady=5)
                row.append(sudoku_grid[i][j])       # add the fixed number into the row
        entry_gird.append(row)                    # add row into entry_gird when finish each row loop


def check():
    incorrect = 51              # the amount of 0 in sudoku_grid (what the user has to input) which means, when empty, it's not correct
    for i in range(len(key)):
        for j in range(len(key[i])):                # for each column in each row of key
            if isinstance(entry_gird[i][j], Entry):     # if the index in entry_grid is an entry, will get the value from that entry
                entry_value = entry_gird[i][j].get()  
                if entry_value.isdigit() and int(entry_value) == key[i][j]:        # if the value is equal to the key's value in the same index, will decrease the incorrect count by 1
                    incorrect -= 1
    
    check_window = Toplevel()   # create a new window on top of the main window and connect them 
    if incorrect > 0:           # if there are any incorrect counts left, show a window displaying the remaining counts    
        Label(check_window, justify='center', text=str(incorrect) + " incorrect(s) grid left").pack()
    else:                       # if there is none, show a "you win" window
        Label(check_window, justify='center', text="You win!").pack()

def save():
    save_gird = []     # create an empty save list in the function to reset it when clicked 
    for i in range(len(sudoku_grid)):
        row = []
        for j in range(len(sudoku_grid[i])): # for each column in each row of sudoku_grid 
            if isinstance(entry_gird[i][j], Entry): # if the index in entry_grid is an entry, will get the value from that entry
                entry_value = entry_gird[i][j].get()
                if entry_value != '':                   # if the value is not ''
                    row.append(int(entry_value))        # will append that value in row
                else:                                   # if it is
                    row.append(0)                       # will append 0
            else:                            # if the index in entry_grid is not an entry,
                row.append(sudoku_grid[i][j])# will append the fixed number from sudoku_grid in the same index
        save_gird.append(row) # append row in save_gird when finish the row loop
    
    with open('A2/save.txt', 'w') as save_file: # open save.txt in A2 folder in writing mode
        for i in range(len(save_gird)):
            for j in range(len(save_gird[i])):  # for each index in each column of each row
                num = str(save_gird[i][j])      # take each character in save_grid 
                save_file.write(num)            # and write it in save.txt

def load():
    with open('A2/save.txt', 'r') as save_file: # open save.txt in A2 folder in reading mode
        content = save_file.read() #read the whole text file

        if len(content) != 81: # to make sure that save.txt has exactly 81 characters
            print("The text file does not contain 81 characters for the Sudoku grid.\n")
            print("Please make sure the text file has exactly 81 characters.")
            sys.exit()

        for i in range(len(sudoku_grid)): 
            num_row = content[i*9:(i+1)*9] # take 9 characters each loop
            row = [] # set in row loop to reset it when enter a new row loop

            for j in range(len(sudoku_grid[i])):
                if sudoku_grid[i][j] == 0:
                # if the number in sudoku_grid is 0,
                # it means this grid must be an entry
                    if num_row[j] != '0':
                    # if the read number isn't 0. The entry will show the number as typed
                        entry = Entry(window, width=3, font=('Courier', 24),
                                      justify='center', fg='#000000', borderwidth=2)
                        entry.insert(0, num_row[j]) # insert the number
                        entry.grid(row=i, column=j, padx=5, pady=5)
                    else:
                    # if the read number isn't 0. The entry will be empty
                        entry = Entry(window, width=3, font=('Courier', 24),
                                      justify='center', fg='#000000', borderwidth=2)
                        entry.grid(row=i, column=j, padx=5, pady=5)
                    row.append(entry) # append entry to row

                else:
                # if the number in sudoku_grid is not 0,
                # it means this grid must be a lebel
                    label = Label(window, text=str(sudoku_grid[i][j]), width=3,
                                  font=('Courier', 24), justify='center', fg='#000000',
                                  borderwidth=2)
                    label.grid(row=i, column=j, padx=5, pady=5)
                    row.append(sudoku_grid[i][j]) # append label to row
            entry_gird[i] = row # give the row in entry_grid a new value

def submit_button():
    submit_button=Button(window, text="Submit", font=('Courier', 24), command=check)        # create a submit button that will run check() when clicked
    submit_button.grid(row=5, column=11, padx=5, pady=5)

def save_button():
    save_button=Button(window, text="Save", font=('Courier', 24), command=save)
    save_button.grid(row=6, column=11, padx=5, pady=5)

def load_button():
    load_button=Button(window, text="Load Save", font=('Courier', 24), command=load)
    load_button.grid(row=7, column=11, padx=5, pady=5)

window = Tk()               # instantiate a window           
window.title("• Sudoku •")  # set window name
create_grid()
submit_button()
save_button()

window.mainloop()
